@{
    ViewBag.Title = "Home Page";
}
<style>
    body,html,#map {
        height:100%;
        width:100%;
    }
    #add {
        position:fixed;
        top:20px;
        right:20px;
    }
</style>
<div id="map" class="map"></div>
<input type="button" value="add" id="add"/>
<script>
    var map;
    require([
        "esri/map",
        "esri/request",
         "esri/geometry/Polygon",
         "esri/geometry/Polyline",
         "esri/layers/GraphicsLayer",
         "esri/symbols/SimpleFillSymbol",
         "esri/symbols/SimpleLineSymbol",
         "esri/symbols/TextSymbol",
         "esri/SpatialReference",
         "esri/graphic",
        "dojo/domReady!"
    ], function (Map, request, Polygon, Polyline, GraphicsLayer, SimpleFillSymbol, SimpleLineSymbol, TextSymbol, SpatialReference, Graphic) {
        map = new Map("map", {
            basemap: "topo",
            center: [0, 0],
            zoom: 2
        });
        var graphicslayers = new GraphicsLayer();

        $("#add").on("click", function () {
            graphicslayers.clear();
            var dataRequest = request({
                url: "/Home/getResult"
            });
            dataRequest.then(function (res) {
                var result = eval(res);
                var features = null;
                for (var i = 0; i < result.length; i++) {
                    var line = result[i],
                        type = line.Type,
                        value = line.Value,
                        pointlist = line.data;
                    //console.log(line);
                    var coordinates = [];
                    for (var j = 0; j < pointlist.length; j++) {
                        coordinates.push([pointlist[j][1] / 400 + 115.23, pointlist[j][0] / 400 + 38.54]);
                    }
                    
                    //console.log(coordinates)
                    var textSymbol = new TextSymbol(value.toString());
                    if (type == "Close") {
                        var symbol = new SimpleFillSymbol().setColor(null).outline.setColor(getColor(value));
                      
                        var polygon = new Polygon(coordinates);
                        //polygon.addRing(coordinates);

                        var graphic = new Graphic(polygon, symbol);
                        graphicslayers.add(graphic);
                    } 
                    else if (type == "Border") {
                        var symbol = new SimpleLineSymbol().setColor(getColor(value));
                        var polyline = new Polyline(coordinates);
                        var graphic = new Graphic(polyline, symbol);
                        graphicslayers.add(graphic);
                    }
                }
                map.addLayer(graphicslayers);
            }, function (err) { })
        })


    })

    //window.onload = function () {
    //    //$.ajax({
    //    //    url: "/Home/getResult",
    //    //    success: function (result) {
    //    //        alert(result);
    //    //    }
    //    //})
    //    var map = new ol.Map({
    //        layers: [
    //          new ol.layer.Tile({
    //              source: new ol.source.OSM()
    //          })
    //        ],
    //        target: 'map',
    //        controls: ol.control.defaults({
    //            attributionOptions: /** type {olx.control.AttributionOptions} */ ({
    //                collapsible: false
    //            })
    //        }),
    //        view: new ol.View({
    //            center: [0, 0],
    //            zoom: 2
    //        })
    //    });
    //    var vectorLayer = [];
    //    $("#add").on("click", function (et) {
    //        et.preventDefault();
    //        if (vectorLayer.length != 0) {
    //            for (var i = 0; i < vectorLayer.length; i++) {
    //                map.removeLayer(vectorLayer[i]);
    //            }
    //        };
    //        $.ajax({
    //            url:"/Home/getResult",
    //            success: function (data) {
    //                console.log(data)
    //                var result = eval(data);
    //                console.log(result)
    //                var features = null;
    //                //var coordinates = []
    //                for (var i = 0; i < result.length; i++) {
    //                    console.log(type + "  " + value)
    //                    //lines
    //                    var line = result[i],
    //                        type = line.Type,
    //                        value = line.Value,
    //                        pointlist = line.data;
    //                    var coordinates = [];
    //                    for (var j = 0; j < pointlist.length; j++) {
    //                        //points
    //                        coordinates.push(new ol.proj.fromLonLat([pointlist[j][1]/400 + 115.23, pointlist[j][0]/400 + 38.54]));
    //                       // features[i] = new ol.Feature(new ol.geom.Point([line[j][0] / 400 + 38.54, line[j][1] / 400 + 115.23]))
    //                    }

    //                    if (type == "Border") {
    //                        features = new ol.Feature(new ol.geom.LineString(coordinates));
    //                    } else if (type == "Close") {
    //                        features = new ol.Feature(new ol.geom.Polygon([coordinates]));
    //                    }
    //                    var source = new ol.source.Vector({
    //                        features: [features]
    //                    });
    //                    var color = getColor(value);
    //                    console.log(color);
    //                    vectorLayer[i] = new ol.layer.Vector({
    //                        source: source,
    //                        style: new ol.style.Style({
    //                            stroke: new ol.style.Stroke({
    //                                color: color,
    //                                width: 3
    //                            }),
    //                            text: new ol.style.Text({
    //                                text:value,
    //                                scale: 2.0
    //                            })
    //                        })
    //                    })
    //                    map.addLayer(vectorLayer[i]);
                        
    //                }
                   

                   
                    
                   
    //                console.log("yes");
                    
    //                console.log("2322");
    //            }
    //        })
    //    })

        function getColor(value) {
            switch (value) {
                case '20':
                    return "#0244FC";
                case '40':
                    return "#D4E82E";
                case '60':
                    return "#FABA01";
                case '80':
                    return "#FF2511";
            }
        }
    //}
</script>