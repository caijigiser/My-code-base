Emergency.Map.Route = {

    /**
 * 十六进制颜色转换为RGB颜色
 * @param color 要转换的十六进制颜色
 * @return RGB颜色
 * @author CodingMan
 */
    colorHexToRGB: function (color) {
        color = color.toUpperCase();
        var regexpHex = /^#[0-9a-fA-F]{3,6}$/;//Hex
        if (regexpHex.test(color)) {
            var hexArray = new Array();
            var count = 1;
            for (var i = 1; i <= 3; i++) {
                if (color.length - 2 * i > 3 - i) {
                    hexArray.push(Number("0x" + color.substring(count, count + 2)));
                    count += 2;
                } else {
                    hexArray.push(Number("0x" + color.charAt(count) + color.charAt(count)));
                    count += 1;
                }
            }
            return hexArray;//.join(",")
        } else {
            return color;
        }
    },

    routePlan: function (x1, y1, x2, y2, barrierPathArray, isDraw, callBack) {
        require([
                   "esri/symbols/SimpleLineSymbol", "esri/Color",
                   "esri/tasks/RouteTask",
                    "esri/tasks/FeatureSet",
                   "esri/tasks/RouteParameters"
        ], function () {
            var routeServiceUrl = Robin.Setting.MapAnalyse.route.url;
            var routeGraphicLayer = Robin.Map.GetGraphicLayer(top.Robin.Map.Map2DControl, Robin.Setting.MapAnalyse.route.routeLayerName);
            //Robin.Map.ClearLayer(top.Robin.Map.Map2DControl, Robin.Setting.MapAnalyse.route.routeLayerName);
            if (routeGraphicLayer != null) {
                routeGraphicLayer.clear();
            }
            var map = top.Robin.Map.Map2DControl;
            var wkid = Robin.Setting.GlobalSetting.wkid;
            //起点、终点
            var ptStart = new esri.geometry.Point(parseFloat(x1), parseFloat(y1), new esri.SpatialReference({ wkid: wkid }));
            var ptEnd = new esri.geometry.Point(parseFloat(x2), parseFloat(y2), new esri.SpatialReference({ wkid: wkid }));
            var startPtGra = new esri.Graphic(ptStart);
            var endPtGra = new esri.Graphic(ptEnd);

            //设置路径样式
            var routeSymbol = new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([82, 152, 255, 1]), 5);
            //起点、终点尾部线
            var routeSymbolDef = new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([77, 220, 38, 1]), 5);

            var routeTask = new esri.tasks.RouteTask(routeServiceUrl);
            var routeParams = new esri.tasks.RouteParameters();
            //设置参数
            routeParams.outSpatialReference = { wkid: wkid };
            routeParams.returnRoutes = true;
            routeParams.returnDirections = true;
            routeParams.directionsLengthUnits = esri.Units.METERS;
            routeParams.stops = new esri.tasks.FeatureSet();
            routeParams.stops.features.push(startPtGra);
            routeParams.stops.features.push(endPtGra);

            //route = JSON.stringify(barrierPathArray);
            //var temp = jQuery.parseJSON(route);
            //var array = [];
            //$.each(temp, function (i, item) {
            //    var point = [item[0], item[1]];
            //    array.push(point);
            //});

            ////设置路障参数
            //if (array.length > 0) {
            //    var barrierRoute = new esri.geometry.Polyline(new esri.SpatialReference({ wkid: wkid }));
            //    barrierRoute.addPath(array);
            //    var barriersGraphic = new esri.Graphic(barrierRoute);
            //    routeParams.polylineBarriers = new esri.tasks.FeatureSet();
            //    routeParams.polylineBarriers.features.push(barriersGraphic);
            //}


            if (barrierPathArray) {
                routeParams.polylineBarriers = new esri.tasks.FeatureSet();
                for (var i = 0; i < barrierPathArray.length; i++) {
                    if (barrierPathArray[i].length == 0) {
                        continue;
                    }
                    var barrierRoute = new esri.geometry.Polyline(new esri.SpatialReference({ wkid: wkid }));
                    barrierRoute.addPath(barrierPathArray[i]);
                    var barriersGraphic = new esri.Graphic(barrierRoute);
                    routeParams.polylineBarriers.features.push(barriersGraphic);
                }
            }
            if (routeParams.stops.features.length == 0) {
                noty({ text: "路径规划输入参数不全，无法分析", type: "warning", layout: "topCenter", timeout: 2000 });
                return;
            }

            routeTask.solve(routeParams, function (solveResult) {
                if (callBack) {
                    callBack(solveResult);
                }

                var routeResults = solveResult.routeResults;
                var res = routeResults.length;
                if (isDraw == false) {
                    return;
                }

                if (res > 0) {
                    for (var i = 0; i < res; i++) {
                        var graphicroute = routeResults[i];
                        var graphic = graphicroute.route;
                        graphic.setSymbol(routeSymbol);
                        routeGraphicLayer.add(graphic);

                        //连接路线起点、终点与对应定位起点、终点
                        var paths = graphic.geometry.paths[0];
                        var routeStr = paths[0];
                        var routeEnd = paths[paths.length - 1];

                        var routeStrline = new esri.geometry.Polyline([[x1, y1], routeStr], new esri.SpatialReference({ wkid: wkid }));
                        var routeEndline = new esri.geometry.Polyline([[x2, y2], routeEnd], new esri.SpatialReference({ wkid: wkid }));
                        var strlinegraphic = new esri.Graphic(routeStrline, routeSymbolDef);
                        var endlinegraphic = new esri.Graphic(routeEndline, routeSymbolDef);

                        routeGraphicLayer.add(strlinegraphic);
                        routeGraphicLayer.add(endlinegraphic);
                    }
                }
                else {
                    //alert("路径规划返回结果空");
                }
            }, function (error) {
                noty({ text: "没有找到合适的路线", type: "warning", layout: "topCenter", timeout: 2000 });
            });
        });
    },

    //救援、撤离路线
    arrowRoute: function (xStr, yStr, xEnd, yEnd, barrierPathArray, config, callback) {
        var wkid = Robin.Setting.GlobalSetting.wkid;
        require(["esri/geometry/Polyline", "js/DirectionalLineSymbol", "esri/symbols/PictureMarkerSymbol"],
            function (Polygon, DirectionalLineSymbol, PictureMarkerSymbol) {
                var graphicsLayer = Robin.Map.GetGraphicLayer(Robin.Map.Map2DControl, config.graphicLayerName);

                Emergency.Map.Route.routePlan(xStr, yStr, xEnd, yEnd, barrierPathArray, false, function (solveResult) {
                    var routeResults = solveResult.routeResults[0].route.geometry.paths;
                    var resultRoute = routeResults[0];
                    resultRoute.unshift([xStr, yStr]);
                    resultRoute.push([xEnd, yEnd]);

                    var picSymbol = new esri.symbol.PictureMarkerSymbol();
                    picSymbol.setUrl(config.pic);
                    picSymbol.setHeight(16);
                    picSymbol.setWidth(16);

                    var colorHex = Emergency.Map.Route.colorHexToRGB(config.color);
                    var basicOptions = {
                        style: esri.symbol.SimpleLineSymbol.STYLE_SOLID,
                        color: new dojo.Color(colorHex),
                        width: 2,
                        directionSymbol: picSymbol,
                        directionPixelBuffer: 30
                    };

                    var basicPolyline = new esri.geometry.Polyline(resultRoute);
                    basicPolyline.setSpatialReference(new esri.SpatialReference({ wkid: wkid }));

                    var basicSymbol = new DirectionalLineSymbol(basicOptions);

                    var routeGraphic = new esri.Graphic(basicPolyline, basicSymbol, null, null);
                    graphicsLayer.add(routeGraphic);

                    if (callback) {
                        callback(solveResult);
                    }
                });

            });
    },

    //应急演练调用方法
    DrillPlayStart: function (dataResult, x, y, type) {
        planDrillData = [];
        result = JSON.parse(dataResult);
        var xMax = x;
        var xMin = x;
        var yMax = y;
        var yMin = y;
        var configred = {
            graphicLayerName: "DrillGraphicLayerName",
            color: "#ff0000",
            pic: "../images/Map/filled-arrow-green-red.png"
        }
        var config = {
            graphicLayerName: "DrillGraphicLayerName",
            color: "#00ff00",
            pic: "../images/Map/filled-arrow.png"
        }
        var graphicLayer = Robin.Map.GetGraphicLayer(Robin.Map.Map2DControl, "drillRouteGraphic");
        var graphicsLayer = Robin.Map.GetGraphicLayer(Robin.Map.Map2DControl, config.graphicLayerName);
        graphicLayer.clear();
        graphicsLayer.clear();
        //添加事故演练图标
        require(["esri/symbols/PictureMarkerSymbol", "esri/geometry/Point", "esri/graphic", "esri/SpatialReference"], function (PictureMarkerSymbol, Point, Graphic, SpatialReference) {
            //添加事故演练图标
            var pt = new Point(x, y, new SpatialReference({ wkid: Robin.Setting.GlobalSetting.wkid }));//x,y,坐标系
            var pms = new PictureMarkerSymbol("../images/emergency/symbol/accident_4.png", 30, 30);//图片路径和大小
            var graphic = new Graphic(pt, pms);//新建
            var graphicsLayer = Robin.Map.GetGraphicLayer(top.Robin.Map.Map2DControl, "drillRouteGraphic");//config.graphicLayerName
            graphicsLayer.add(graphic);
        });
        if (type == "1") {
            if (result.TeamList.length > 0) {
                $.each(result.TeamList, function (j, v) {
                    if (v.X && v.Y) {
                        Emergency.Map.Route.DrillRoutePlan(v.X, v.Y, x, y, null, configred, function (solveResult) {//路障信息为空
                            var length = solveResult.routeResults[0].directions.totalLength;
                            planDrillData.push({ point: solveResult.routeResults[0].route.geometry.paths, routeID: v.ID });
                        });
                        xMax = Math.max(v.X, xMax);
                        xMin = Math.min(v.X, xMin);
                        yMax = Math.max(v.Y, yMax);
                        yMin = Math.min(v.Y, yMin);

                    }
                    //引用
                    require(["esri/symbols/PictureMarkerSymbol", "esri/geometry/Point", "esri/graphic", "esri/SpatialReference"], function (PictureMarkerSymbol, Point, Graphic, SpatialReference) {
                        //添加车辆图标
                        var pt = new Point(v.X, v.Y, new SpatialReference({ wkid: Robin.Setting.GlobalSetting.wkid }));//x,y,坐标系
                        var pms = new PictureMarkerSymbol("../images/emergency/symbol/Car_Top.png", 35, 35);//图片路径和大小
                        var graphic = new Graphic(pt, pms);//新建
                        graphic.routeID = v.ID;
                        var graphicsLayer = Robin.Map.GetGraphicLayer(top.Robin.Map.Map2DControl, "drillRouteGraphic");//config.graphicLayerName
                        graphicsLayer.add(graphic);
                    });
                });
                //使线路显示在地图中间
                Emergency.Map.MapTool.zoomToGeometry(xMin, xMax, yMin, yMax, 3);
                top.NProgress.done();
            }
        } else {
            if (result.MedicalList.length > 0) {
                $.each(result.MedicalList, function (j, v) {
                    if (v.X && v.Y) {
                        Emergency.Map.Route.DrillRoutePlan(x, y, v.X, v.Y, null, config, function (solveResult) {//路障信息为空
                            var length = solveResult.routeResults[0].directions.totalLength;
                            planDrillData.push({ point: solveResult.routeResults[0].route.geometry.paths, routeID: v.ID });
                        });
                        xMax = Math.max(v.X, xMax);
                        xMin = Math.min(v.X, xMin);
                        yMax = Math.max(v.Y, yMax);
                        yMin = Math.min(v.Y, yMin);
                    }
                    //引用
                    require(["esri/symbols/PictureMarkerSymbol", "esri/geometry/Point", "esri/graphic", "esri/SpatialReference"], function (PictureMarkerSymbol, Point, Graphic, SpatialReference) {
                        //添加车辆图标
                        var pt = new Point(x, y, new SpatialReference({ wkid: Robin.Setting.GlobalSetting.wkid }));//x,y,坐标系
                        var pms = new PictureMarkerSymbol("../images/emergency/symbol/Car_Top.png", 35, 35);//图片路径和大小
                        var graphic = new Graphic(pt, pms);//新建
                        graphic.routeID = v.ID;
                        var graphicsLayer = Robin.Map.GetGraphicLayer(top.Robin.Map.Map2DControl, "drillRouteGraphic");//config.graphicLayerName
                        graphicsLayer.add(graphic);
                    });
                });
            }
            if (result.ShelterList.length > 0) {
                $.each(result.ShelterList, function (j, v) {
                    if (v.X && v.Y) {
                        Emergency.Map.Route.DrillRoutePlan(x, y, v.X, v.Y, null, config, function (solveResult) {//路障信息为空
                            var length = solveResult.routeResults[0].directions.totalLength;
                            planDrillData.push({ point: solveResult.routeResults[0].route.geometry.paths, routeID: v.ID });
                        });
                        xMax = Math.max(v.X, xMax);
                        xMin = Math.min(v.X, xMin);
                        yMax = Math.max(v.Y, yMax);
                        yMin = Math.min(v.Y, yMin);
                    }
                    //引用
                    require(["esri/symbols/PictureMarkerSymbol", "esri/geometry/Point", "esri/graphic", "esri/SpatialReference"], function (PictureMarkerSymbol, Point, Graphic, SpatialReference) {
                        //添加车辆图标
                        var pt = new Point(x, y, new SpatialReference({ wkid: Robin.Setting.GlobalSetting.wkid }));//x,y,坐标系
                        var pms = new PictureMarkerSymbol("../images/emergency/symbol/Car_Top.png", 35, 35);//图片路径和大小
                        var graphic = new Graphic(pt, pms);//新建
                        graphic.routeID = v.ID;
                        var graphicsLayer = Robin.Map.GetGraphicLayer(top.Robin.Map.Map2DControl, "drillRouteGraphic");//config.graphicLayerName
                        graphicsLayer.add(graphic);
                    });
                });

            }
            //使线路显示在地图中间
            Emergency.Map.MapTool.zoomToGeometry(xMin, xMax, yMin, yMax, 3);
            top.NProgress.done();
        }
    },

    //应急演练路径规划
    DrillRoutePlan: function (xStr, yStr, xEnd, yEnd, barrierPathArray, config, callback) {
        var wkid = Robin.Setting.GlobalSetting.wkid;
        require(["esri/geometry/Polyline", "js/DirectionalLineSymbol", "esri/symbols/PictureMarkerSymbol"],
           function (Polygon, DirectionalLineSymbol, PictureMarkerSymbol) {

               var graphicsLayer = Robin.Map.GetGraphicLayer(Robin.Map.Map2DControl, config.graphicLayerName);
               //   graphicsLayer.show();
               Emergency.Map.Route.routePlan(xStr, yStr, xEnd, yEnd, barrierPathArray, false, function (solveResult) {
                   var routeResults = solveResult.routeResults[0].route.geometry.paths;
                   var resultRoute = routeResults[0];
                   resultRoute.unshift([xStr, yStr]);
                   resultRoute.push([xEnd, yEnd]);

                   var picSymbol = new esri.symbol.PictureMarkerSymbol();
                   picSymbol.setUrl(config.pic);
                   picSymbol.setHeight(16);
                   picSymbol.setWidth(16);

                   var colorHex = Emergency.Map.Route.colorHexToRGB(config.color);
                   var basicOptions = {
                       style: esri.symbol.SimpleLineSymbol.STYLE_SOLID,
                       color: new dojo.Color(colorHex),
                       width: 2,
                       directionSymbol: picSymbol,
                       directionPixelBuffer: 30
                   };

                   var basicPolyline = new esri.geometry.Polyline(resultRoute);
                   basicPolyline.setSpatialReference(new esri.SpatialReference({ wkid: wkid }));

                   var basicSymbol = new DirectionalLineSymbol(basicOptions);

                   var routeGraphic = new esri.Graphic(basicPolyline, basicSymbol, null, null);
                   graphicsLayer.add(routeGraphic);

                   if (callback) {
                       callback(solveResult);
                   }
               });

           });
    },

    /**/
    /*演练开始按钮*/
    //计时器时间
    /**/
    StartDrill: function () {
        var routes = planDrillData;
        if (routes != null) {
            timeIndex++;
            var isComplete = true;
            for (var i = 0; i < routes.length; i++) {
                route = planDrillData[i];
                speed = 40 / 10.0;
                var drillPoints = Emergency.Map.Route.GetPointAtDistance(route.point[0], timeIndex, speed);
                if (drillPoints[0] != route.point[0][route.point[0].length - 1][0] && drillPoints[1] != route.point[0][route.point[0].length - 1][1]) {
                    isComplete = false;
                }
                var graphicLayer = Robin.Map.GetGraphicLayer(Robin.Map.Map2DControl, "drillRouteGraphic");//"DrillGraphicLayerName"
                graphic = graphicLayer.graphics;
                for (var j = 0; j < graphicLayer.graphics.length; j++) {
                    if (graphic[j].routeID == route.routeID) {
                        graphicLayer.graphics[j].setGeometry(new esri.geometry.Point(parseFloat(drillPoints[0]), parseFloat(drillPoints[1]), new esri.SpatialReference({ wkid: Robin.Setting.GlobalSetting.wkid })));
                        if (graphicLayer.graphics[j].symbol.url) {
                            graphicLayer.graphics[j].symbol.setAngle(parseFloat("-" + drillPoints[2]));
                        }
                    }
                }
            }
            return isComplete;
        }
    },
    //求路径上指定距离的点+所在段旋转角度
    GetPointAtDistance: function (points, time, speed) {
        if (points.length < 2) return [points[0][0], points[0][1], 0];
        var point = [];
        var metres = speed * time;
        if (metres <= 0) return [points[0][0], points[0][1], Emergency.Map.Route.GetAngle(points[0], points[1])];
        var dist = 0;
        var olddist = 0;
        for (var i = 1; (i < points.length && dist < metres) ; i++) {
            olddist = dist;

            dist += Math.sqrt((points[i][0] - points[i - 1][0]) * (points[i][0] - points[i - 1][0])
                             + (points[i][1] - points[i - 1][1]) * (points[i][1] - points[i - 1][1]));
        }
        if (dist < metres) {
            return [points[points.length - 1][0], points[points.length - 1][1], Emergency.Map.Route.GetAngle(points[points.length - 2], points[points.length - 1])];
        }
        var p1 = points[i - 2];
        var p2 = points[i - 1];
        var m = (metres - olddist) / (dist - olddist);
        point = [p1[0] + (p2[0] - p1[0]) * m, p1[1] + (p2[1] - p1[1]) * m, Emergency.Map.Route.GetAngle(p1, p2)];
        return point;
    },

    //求两点构成向量的角度
    GetAngle: function (ptStr, ptEnd) {
        var Poor = ptStr[0] - ptEnd[0];
        if (Poor <= 0) {
            Poor = Poor * (-1);
        }
        if (Poor > 0.001) {
            var diff_x = ptEnd[0] - ptStr[0],
            diff_y = ptEnd[1] - ptStr[1];
            //返回角度,不是弧度
            var angle = Math.atan2(diff_y, diff_x);
            if (angle <= 0) {
                angle = angle + 2 * Math.PI;
                angle = angle * 180 / Math.PI;
            } else {
                angle = 180 * angle / Math.PI;
            }
            return angle;
        } else {
            if (ptStr[0] - ptEnd[0] < 0) {
                return 0;
            } else {
                return 180;
            }

        }
    },
    SetParameter: function (dataResult, x, y, cunter) {
        Parameter[0] = dataResult;
        Parameter[1] = x;
        Parameter[2] = y;
        Parameter[3] = cunter;

    },
    GetParameter: function () {
        return Parameter;
    },
    StartTimes: function () {
        //  var StartTime = 1;
        hour = parseInt(StartTime / 3600);    // 计算时 
        minutes = parseInt((StartTime % 3600) / 60);    // 计算分 
        seconds = parseInt(StartTime % 60);    // 计算秒  
        hour = hour < 10 ? "0" + hour : hour;
        minutes = minutes < 10 ? "0" + minutes : minutes;
        seconds = seconds < 10 ? "0" + seconds : seconds;
        $("#DrillTimes").val(hour + ":" + minutes + ":" + seconds);
        StartTime++;
    },
}